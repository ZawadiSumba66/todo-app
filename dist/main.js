(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(15),o=n.n(r),i=n(645),d=n.n(i)()(o());d.push([e.id,".hidden {\r\n  display: none;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\np {\r\n  display: flex;\r\n}\r\n\r\n.flex-column {\r\n  flex-direction: column;\r\n}\r\n\r\n.projects {\r\n  margin-right: 10px;\r\n  color: white;\r\n  background-color: #542e71;\r\n  top: 0;\r\n  right: 0;\r\n  height: 150vh;\r\n}\r\n\r\n.delete-project {\r\n  border-radius: 100%;\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-top: 30px;\r\n}\r\n\r\n.projects .project {\r\n  padding-top: 10px;\r\n  font-size: 1.2rem;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.delete {\r\n  border-bottom: 5px solid black;\r\n  border: none;\r\n  color: white;\r\n  font-weight: bold;\r\n  background-color: rgb(253, 78, 78);\r\n}\r\n\r\n.d-flex {\r\n  display: flex;\r\n}\r\n\r\n.projects div {\r\n  width: 15vw;\r\n  height: 50px;\r\n}\r\n\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.active {\r\n  background-color: red;\r\n}\r\n\r\n.absolute {\r\n  position: absolute;\r\n}\r\n\r\n.forms {\r\n  min-width: 10%;\r\n  min-height: 100vh;\r\n  background-color: #ddd8b8;\r\n  right: 0;\r\n  top: 0;\r\n  padding: 25px;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,yBAAyB;EACzB,MAAM;EACN,QAAQ;EACR,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,kBAAkB;EAClB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,8BAA8B;EAC9B,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,kCAAkC;AACpC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,yBAAyB;EACzB,QAAQ;EACR,MAAM;EACN,aAAa;AACf",sourcesContent:[".hidden {\r\n  display: none;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\np {\r\n  display: flex;\r\n}\r\n\r\n.flex-column {\r\n  flex-direction: column;\r\n}\r\n\r\n.projects {\r\n  margin-right: 10px;\r\n  color: white;\r\n  background-color: #542e71;\r\n  top: 0;\r\n  right: 0;\r\n  height: 150vh;\r\n}\r\n\r\n.delete-project {\r\n  border-radius: 100%;\r\n  width: 30px;\r\n  height: 30px;\r\n  margin-top: 30px;\r\n}\r\n\r\n.projects .project {\r\n  padding-top: 10px;\r\n  font-size: 1.2rem;\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.delete {\r\n  border-bottom: 5px solid black;\r\n  border: none;\r\n  color: white;\r\n  font-weight: bold;\r\n  background-color: rgb(253, 78, 78);\r\n}\r\n\r\n.d-flex {\r\n  display: flex;\r\n}\r\n\r\n.projects div {\r\n  width: 15vw;\r\n  height: 50px;\r\n}\r\n\r\n.pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.active {\r\n  background-color: red;\r\n}\r\n\r\n.absolute {\r\n  position: absolute;\r\n}\r\n\r\n.forms {\r\n  min-width: 10%;\r\n  min-height: 100vh;\r\n  background-color: #ddd8b8;\r\n  right: 0;\r\n  top: 0;\r\n  padding: 25px;\r\n}\r\n"],sourceRoot:""}]);const c=d},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(o[d]=!0)}for(var c=0;c<e.length;c++){var a=[].concat(e[c]);r&&o[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),t.push(a))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var d,c=e[Symbol.iterator]();!(r=(d=c.next()).done)&&(n.push(d.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],d=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(d)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(a," */"),s=d.sources.map((function(e){return"/*# sourceURL=".concat(d.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([l]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function d(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var c=e[o],a=t.base?c[0]+t.base:c[0],l=n[a]||0,s="".concat(a," ").concat(l);n[a]=l+1;var p=d(s),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(i[p].references++,i[p].updater(u)):i.push({identifier:s,updater:m(u,t),references:1}),r.push(s)}return r}function a(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var d=o(e.insert||"head");if(!d)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");d.appendChild(t)}return t}var l,s=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var i=document.createTextNode(o),d=e.childNodes;d[t]&&e.removeChild(d[t]),d.length?e.insertBefore(i,d[t]):e.appendChild(i)}}function u(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var A=null,h=0;function m(e,t){var n,r,o;if(t.singleton){var i=h++;n=A||(A=a(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=a(t),r=u.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=d(n[r]);i[o].references--}for(var a=c(e,t),l=0;l<n.length;l++){var s=d(n[l]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=a}}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{class e{constructor(e,t=[],n=!1){this.name=e,this.list=t,this.active=n}}e.prototype.addTodo=function(e){this.list.push(e)};const t=(()=>{let t=[];return{createProject:(n,r=[])=>{const o=new e(n,r);return t.push(o),o},getProjectsArray:()=>t,deleteProject:e=>t.splice(e,1),getActive:()=>{for(let e=0;e<t.length;e+=1)if(t[e].active)return e;return 0},setProjectsArray:e=>{t=e}}})(),r=t;class o{constructor(e,t,n,r){this.title=e,this.description=t,this.date=n,this.priority=r}}o.prototype.edit=function(e,t,n,r){this.title=e,this.description=t,this.date=n,this.priority=r};const i=(e,t,n,r)=>new o(e,t,n,r),d=(e,t)=>e.splice(t,1),c=()=>{const e=t.getProjectsArray();localStorage.projects=JSON.stringify(e)},a=()=>{if(localStorage.projects){const n=JSON.parse(localStorage.projects);for(let t=0;t<n.length;t+=1){Object.setPrototypeOf(n[t],e.prototype);const{list:r}=n[t];for(let e=0;e<r.length;e+=1)Object.setPrototypeOf(r[e],o.prototype)}t.setProjectsArray(n)}},l=e=>{const t=document.createElement("label");t.setAttribute("for",`${e}`);let n=e.charAt(0).toUpperCase();return n=n.concat(e.slice(1)),t.textContent=n,t},s=(e,t)=>{const n=document.createElement("input");return n.setAttribute("id",`${e}`),n.type=t,n},p=()=>{const e=r.getProjectsArray();for(let t=0;t<e.length;t+=1)e[t].active=!1},u=(e,t,n)=>{const r=document.createElement("div");r.classList.add("expanded");const o=document.createElement("button");o.addEventListener("click",f.bind(void 0,e,t,n)),o.textContent="Edit",r.appendChild(o),n.appendChild(r)},A=(e,t)=>{const n=document.createElement("div"),r=document.createElement("div");r.classList.add("todo-items");const o=document.createElement("p"),i=document.createElement("p"),a=document.createElement("p"),l=document.createElement("p"),s=document.createElement("button");s.classList.add("delete"),s.textContent="Delete",s.addEventListener("click",(()=>{d(e,t),n.parentNode.removeChild(n),c()}));const p=document.createElement("button");return p.classList.add("edit"),p.textContent="click here to view more",o.textContent=e[t].title,p.addEventListener("click",u.bind(void 0,e,t,n)),i.textContent=e[t].description,a.textContent=e[t].date,l.textContent=e[t].priority,r.appendChild(o),r.appendChild(i),r.appendChild(a),r.appendChild(l),r.appendChild(p),r.appendChild(s),n.appendChild(r),n},h=(e,t)=>{const n=t,o=r.getProjectsArray();if(n.innerHTML="",0===o.length)return;const i=document.createElement("button");i.classList.add("add"),i.setAttribute("id",e);const d=document.createElement("h3");d.textContent=o[e].name,i.textContent="Add Task",i.addEventListener("click",(()=>{const t=document.querySelector(".forms .todo-form");t.setAttribute("id",e),t.querySelector("h3").textContent="New Todo",t.classList.toggle("hidden")})),n.appendChild(d),n.appendChild(i);const{list:c}=o[e];for(let e=0;e<c.length;e+=1){const t=A(c,e);n.appendChild(t)}},m=(e,t=0,n,o)=>{const i=n,d=o;i.innerHTML="";for(let n=0;n<e.length;n+=1){const o=document.createElement("div");o.classList.add("d-flex"),e[n].active=!1,n===t&&(e[n].active=!0);const a=document.createElement("p");a.classList.add("project");const l=document.createElement("button");l.classList.add("delete-project"),l.textContent="X",l.addEventListener("click",(()=>{e[n].active?(r.deleteProject(n),i.removeChild(o),h(0,d)):(r.deleteProject(n),m(e,r.getActive(),i,d)),c()})),a.classList.add("pointer"),a.textContent=e[n].name,a.addEventListener("click",(()=>{h(n,d),p(),e[n].active=!0})),o.classList.add("d-flex"),o.appendChild(a),o.appendChild(l),i.appendChild(o)}},f=(e,t,n)=>{const r=n.querySelector(".expanded");r.innerHTML="";const o=((e,t,n)=>{const r=document.createElement("form");r.classList.add("todo-form");const o=((e="",t="",n="",r="")=>{const o=document.createElement("div");o.classList.add("d-flex","flex-column");const i=document.createElement("h3");i.classList.add("m-bot-10","bold","title");const d=l("title"),c=s("title","text");c.value=e;const a=l("description"),p=document.createElement("textarea");p.setAttribute("id","description"),p.value=t;const u=l("due"),A=s("due","date");A.value=n;const h=document.createElement("select");h.setAttribute("id","priority");const m=["High","Low","Medium"];for(let e=0;e<m.length;e+=1){const t=document.createElement("option");t.value=m[e],t.text=m[e],h.appendChild(t)}h.value=r;const f=l("priority");return o.appendChild(i),o.appendChild(d),o.appendChild(c),o.appendChild(a),o.appendChild(p),o.appendChild(u),o.appendChild(A),o.appendChild(f),o.appendChild(h),o})(e[t].title,e[t].description,e[t].date,e[t].priority),i=s("Submit","submit");return i.value="Edit",i.addEventListener("click",(o=>{o.preventDefault();const i=r.querySelector("#title"),d=r.querySelector("#description"),a=r.querySelector("#due"),l=r.querySelector("#priority");e[t].edit(i.value,d.value,a.value,l.value);const s=A(e,t);n.parentNode.insertBefore(s,n),n.parentNode.removeChild(n),c()})),o.appendChild(i),r.appendChild(o),r})(e,t,n);r.appendChild(o)};var C=n(379),v=n.n(C),E=n(426);v()(E.Z,{insert:"head",singleton:!1}),E.Z.locals,localStorage.projects?a():r.createProject("Default",[i("New Todo","You can create Todos","12-10-2021",1)]),(e=>{const t=document.querySelector(".content");t.classList.add("d-flex","content");const n=document.createElement("div"),o=document.createElement("div"),d=document.createElement("div");d.classList.add("forms","absolute"),n.setAttribute("id","projects","d-flex"),n.classList.add("projects"),o.setAttribute("id","todo"),o.classList.add("todo");const a=(e=>{const t=e,n=document.createElement("form");n.classList.add("hidden","todo-form");const o=document.createElement("div");o.classList.add("d-flex","flex-column");const d=document.createElement("h3");d.classList.add("m-bot-10","bold","title");const a=l("title"),p=s("title","text");p.value="";const u=l("description"),A=document.createElement("textarea");A.setAttribute("id","description"),A.value="";const m=l("due"),f=s("due","date");f.value="";const C=l("Priority"),v=["High","Low","Medium"],E=document.createElement("select");E.setAttribute("id","priority");for(let e=0;e<v.length;e+=1){const t=document.createElement("option");t.value=v[e],t.text=v[e],E.appendChild(t)}E.value="";const b=s("Submit","submit");return b.value="Submit",b.addEventListener("click",(e=>{e.preventDefault();const o=n.querySelector("#title"),d=n.querySelector("#description"),a=n.querySelector("#due"),l=n.querySelector("#priority"),s=i(o.value,d.value,a.value,l.value),p=r.getProjectsArray(),u=n.id;p[u].addTodo(s),h(u,t),n.reset(),c()})),o.appendChild(d),o.appendChild(a),o.appendChild(p),o.appendChild(u),o.appendChild(A),o.appendChild(m),o.appendChild(f),o.appendChild(C),o.appendChild(E),o.appendChild(b),n.appendChild(o),n})(o),p=((e,t,n)=>{const o=e,i=t,d=document.createElement("form"),a=document.createElement("div");a.classList.add("d-flex","flex-column");const p=document.createElement("h3");p.textContent="New Project",p.classList.add("m-bot-10","bold","title");const u=l("name"),A=s("name","text"),f=document.createElement("button");return f.addEventListener("click",(e=>{e.preventDefault(),r.createProject(A.value);const t=r.getProjectsArray();m(t,t.length-1,o,i),h(t.length-1,i),d.reset(),n.classList.add("hidden"),c()})),f.textContent="Submit",a.appendChild(p),a.appendChild(u),a.appendChild(A),a.appendChild(f),d.appendChild(a),d})(n,o,a);d.appendChild(p),d.appendChild(a),t.appendChild(d),t.appendChild(n),t.appendChild(o),h(0,o),m(e,0,n,o)})(r.getProjectsArray())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tYXBwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWFwcC8uL3NyYy90YXNrLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1hcHAvLi9zcmMvYWxsLmpzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG8tYXBwLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJQcm9qZWN0IiwiYWN0aXZlIiwiYWRkVG9kbyIsInRvZG8iLCJwcm9qZWN0TW9kdWxlIiwicHJvamVjdEFycmF5IiwiY3JlYXRlUHJvamVjdCIsIm5ld1Byb2plY3QiLCJnZXRQcm9qZWN0c0FycmF5IiwiZGVsZXRlUHJvamVjdCIsImdldEFjdGl2ZSIsInNldFByb2plY3RzQXJyYXkiLCJUb2RvIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJwcmlvcml0eSIsImVkaXQiLCJsb2NhbFN0b3JhZ2UiLCJwcm9qZWN0cyIsInBhcnNlIiwic2V0UHJvdG90eXBlT2YiLCJqIiwiY3JlYXRlTGFiZWwiLCJsYWJlbCIsImNhcGl0YWxpemVkIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZUlucHV0IiwidHlwZSIsImlucHV0Iiwic2V0QWN0aXZlIiwicHJvamVjdCIsImVkaXRCdXR0b24iLCJwYXJlbnQiLCJkaXYiLCJjbGFzc0xpc3QiLCJhZGQiLCJlZGl0QnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZFRhc2siLCJuZXdEaXYiLCJ3cmFwcGVyIiwidG9kb1RpdGxlIiwidG9kb0Rlc2NyaXB0aW9uIiwidG9kb0RhdGUiLCJ0b2RvUHJpb3JpdHkiLCJkZWxldGVUb2RvQnRuIiwic3RvcmFnZSIsImxvYWRBbGxUb2RvcyIsInRvZG9EaXYiLCJwcm9qZWN0QXJyIiwiaW5uZXJIVE1MIiwiYnRuIiwicHJvamVjdFRpdGxlIiwidG9nZ2xlIiwiYWRkUHJvamVjdHMiLCJwRGl2IiwidERpdiIsInByb2plY3REaXYiLCJwcm9qZWN0U3BhbiIsImRlbGV0ZVByb2plY3RCdG4iLCJleHBhbmRlZCIsImZvcm0iLCJlbGVtZW50IiwiZm9ybVN0cnVjdHVyZSIsInQiLCJkZXNjIiwiZHVlRGF0ZSIsInByIiwiZm9ybVRpdGxlIiwidGl0bGVMYWJlbCIsImRlc2NyaXB0aW9uTGFiZWwiLCJkdWVMYWJlbCIsImR1ZSIsImFycmF5Iiwib3B0aW9uIiwidGV4dCIsInByaW9yaXR5TGFiZWwiLCJ0b2RvRmllbGRzIiwicHJldmVudERlZmF1bHQiLCJlZGl0ZWQiLCJlZGl0Rm9ybSIsImZvcm1EaXYiLCJuZXd0b2RvIiwicmVzZXQiLCJ0b2RvRm9ybSIsInRvZG9GIiwibmFtZUxhYmVsIiwic3VibWl0IiwicHJvamVjdEZvcm0iXSwibWFwcGluZ3MiOiJ1RkFH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LEVBQUc2TCxHQUM3QmEsRUFBS3NCLFFBQ1lFLEVBQ1JuRCxVQUFVQyxJQUFJLFVBQ3ZCVyxPQUVGeUMsRUFBTzlELFlBQWMsU0FFckJlLEVBQVEzRixZQUFZdUgsR0FDcEI1QixFQUFRM0YsWUFBWXlJLEdBQ3BCOUMsRUFBUTNGLFlBQVkzRCxHQUNwQnNKLEVBQVEzRixZQUFZMEksR0FDcEIxQixFQUFLaEgsWUFBWTJGLEdBRVZxQixHQWVNMkIsQ0FBWS9CLEVBQVlULEVBQVNoRCxHQUM5Q2lGLEVBQVFwSSxZQUFZZ0gsR0FDcEJvQixFQUFRcEksWUFBWW1ELEdBQ3BCckosRUFBUWtHLFlBQVlvSSxHQUNwQnRPLEVBQVFrRyxZQUFZNEcsR0FDcEI5TSxFQUFRa0csWUFBWW1HLEdBQ3BCRCxFQUFhLEVBQUdDLEdBQ2hCTSxFQUFZdEMsRUFBVSxFQUFHeUMsRUFBWVQsSUVsV3ZDLENBQUtsQixFQUFRekIscUIiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmhpZGRlbiB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbnAge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG59XFxyXFxuXFxyXFxuLmZsZXgtY29sdW1uIHtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0cyB7XFxyXFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTQyZTcxO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICBoZWlnaHQ6IDE1MHZoO1xcclxcbn1cXHJcXG5cXHJcXG4uZGVsZXRlLXByb2plY3Qge1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXHJcXG4gIHdpZHRoOiAzMHB4O1xcclxcbiAgaGVpZ2h0OiAzMHB4O1xcclxcbiAgbWFyZ2luLXRvcDogMzBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3RzIC5wcm9qZWN0IHtcXHJcXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xcclxcbiAgZm9udC1zaXplOiAxLjJyZW07XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmRlbGV0ZSB7XFxyXFxuICBib3JkZXItYm90dG9tOiA1cHggc29saWQgYmxhY2s7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICBjb2xvcjogd2hpdGU7XFxyXFxuICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyNTMsIDc4LCA3OCk7XFxyXFxufVxcclxcblxcclxcbi5kLWZsZXgge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3RzIGRpdiB7XFxyXFxuICB3aWR0aDogMTV2dztcXHJcXG4gIGhlaWdodDogNTBweDtcXHJcXG59XFxyXFxuXFxyXFxuLnBvaW50ZXIge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uYWN0aXZlIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXHJcXG59XFxyXFxuXFxyXFxuLmFic29sdXRlIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvcm1zIHtcXHJcXG4gIG1pbi13aWR0aDogMTAlO1xcclxcbiAgbWluLWhlaWdodDogMTAwdmg7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkOGI4O1xcclxcbiAgcmlnaHQ6IDA7XFxyXFxuICB0b3A6IDA7XFxyXFxuICBwYWRkaW5nOiAyNXB4O1xcclxcbn1cXHJcXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsU0FBUztFQUNULFVBQVU7QUFDWjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1oseUJBQXlCO0VBQ3pCLE1BQU07RUFDTixRQUFRO0VBQ1IsYUFBYTtBQUNmOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixZQUFZO0VBQ1osWUFBWTtFQUNaLGlCQUFpQjtFQUNqQixrQ0FBa0M7QUFDcEM7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtBQUNkOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIseUJBQXlCO0VBQ3pCLFFBQVE7RUFDUixNQUFNO0VBQ04sYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5oaWRkZW4ge1xcclxcbiAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5wIHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxufVxcclxcblxcclxcbi5mbGV4LWNvbHVtbiB7XFxyXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdHMge1xcclxcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU0MmU3MTtcXHJcXG4gIHRvcDogMDtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgaGVpZ2h0OiAxNTB2aDtcXHJcXG59XFxyXFxuXFxyXFxuLmRlbGV0ZS1wcm9qZWN0IHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XFxyXFxuICB3aWR0aDogMzBweDtcXHJcXG4gIGhlaWdodDogMzBweDtcXHJcXG4gIG1hcmdpbi10b3A6IDMwcHg7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0cyAucHJvamVjdCB7XFxyXFxuICBwYWRkaW5nLXRvcDogMTBweDtcXHJcXG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbi5kZWxldGUge1xcclxcbiAgYm9yZGVyLWJvdHRvbTogNXB4IHNvbGlkIGJsYWNrO1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjUzLCA3OCwgNzgpO1xcclxcbn1cXHJcXG5cXHJcXG4uZC1mbGV4IHtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxufVxcclxcblxcclxcbi5wcm9qZWN0cyBkaXYge1xcclxcbiAgd2lkdGg6IDE1dnc7XFxyXFxuICBoZWlnaHQ6IDUwcHg7XFxyXFxufVxcclxcblxcclxcbi5wb2ludGVyIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmFjdGl2ZSB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxyXFxufVxcclxcblxcclxcbi5hYnNvbHV0ZSB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxufVxcclxcblxcclxcbi5mb3JtcyB7XFxyXFxuICBtaW4td2lkdGg6IDEwJTtcXHJcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDhiODtcXHJcXG4gIHJpZ2h0OiAwO1xcclxcbiAgdG9wOiAwO1xcclxcbiAgcGFkZGluZzogMjVweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImNsYXNzIFByb2plY3Qge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBsaXN0ID0gW10sIGFjdGl2ZSA9IGZhbHNlKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmxpc3QgPSBsaXN0O1xuICAgIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICB9XG59XG5cblByb2plY3QucHJvdG90eXBlLmFkZFRvZG8gPSBmdW5jdGlvbiAodG9kbykge1xuICB0aGlzLmxpc3QucHVzaCh0b2RvKTtcbn07XG5cbmNvbnN0IHByb2plY3RNb2R1bGUgPSAoKCkgPT4ge1xuICBsZXQgcHJvamVjdEFycmF5ID0gW107XG5cbiAgY29uc3QgY3JlYXRlUHJvamVjdCA9IChuYW1lLCBsaXN0ID0gW10pID0+IHtcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IFByb2plY3QobmFtZSwgbGlzdCk7XG4gICAgcHJvamVjdEFycmF5LnB1c2gobmV3UHJvamVjdCk7XG4gICAgcmV0dXJuIG5ld1Byb2plY3Q7XG4gIH07XG5cbiAgY29uc3Qgc2V0UHJvamVjdHNBcnJheSA9IChhcnIpID0+IHtcbiAgICBwcm9qZWN0QXJyYXkgPSBhcnI7XG4gIH07XG5cbiAgY29uc3QgZ2V0UHJvamVjdHNBcnJheSA9ICgpID0+IHByb2plY3RBcnJheTtcblxuICBjb25zdCBkZWxldGVQcm9qZWN0ID0gKGluZGV4KSA9PiBwcm9qZWN0QXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcblxuICBjb25zdCBnZXRBY3RpdmUgPSAoKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0QXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChwcm9qZWN0QXJyYXlbaV0uYWN0aXZlKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZVByb2plY3QsIGdldFByb2plY3RzQXJyYXksIGRlbGV0ZVByb2plY3QsIGdldEFjdGl2ZSwgc2V0UHJvamVjdHNBcnJheSxcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3RNb2R1bGU7XG5leHBvcnQgeyBwcm9qZWN0TW9kdWxlLCBQcm9qZWN0IH07XG4iLCJjbGFzcyBUb2RvIHtcbiAgY29uc3RydWN0b3IodGl0bGUsIGRlc2NyaXB0aW9uLCBkYXRlLCBwcmlvcml0eSkge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gIH1cbn1cblxuVG9kby5wcm90b3R5cGUuZWRpdCA9IGZ1bmN0aW9uICh0aXRsZSwgZGVzY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5KSB7XG4gIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICB0aGlzLmRhdGUgPSBkYXRlO1xuICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG59O1xuXG5jb25zdCB0b2RvTW9kdWxlID0gKCgpID0+IHtcbiAgY29uc3QgY3JlYXRlVG9kbyA9ICh0aXRsZSwgZGVzY3JpcHRpb24sIGRhdGUsIHByaW9yaXR5KSA9PiB7XG4gICAgY29uc3QgbmV3VG9kbyA9IG5ldyBUb2RvKHRpdGxlLCBkZXNjcmlwdGlvbiwgZGF0ZSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiBuZXdUb2RvO1xuICB9O1xuXG4gIGNvbnN0IGRlbGV0ZVRvZG8gPSAobGlzdCwgaW5kZXgpID0+IGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcblxuICByZXR1cm4geyBjcmVhdGVUb2RvLCBkZWxldGVUb2RvIH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCB0b2RvTW9kdWxlO1xuZXhwb3J0IHsgdG9kb01vZHVsZSwgVG9kbyB9OyIsImltcG9ydCAqIGFzIHByb2plY3RzIGZyb20gJy4vcHJvamVjdCc7XG5pbXBvcnQgKiBhcyB0b2RvIGZyb20gJy4vdGFzayc7XG5cbmNvbnN0IHN0b3JhZ2VNb2R1bGUgPSAoKCkgPT4ge1xuICBjb25zdCBzYXZlTG9jYWwgPSAoKSA9PiB7XG4gICAgY29uc3QgcHJvamVjdEFycmF5ID0gcHJvamVjdHMucHJvamVjdE1vZHVsZS5nZXRQcm9qZWN0c0FycmF5KCk7XG4gICAgbG9jYWxTdG9yYWdlLnByb2plY3RzID0gSlNPTi5zdHJpbmdpZnkocHJvamVjdEFycmF5KTtcbiAgfTtcblxuICBjb25zdCBsb2FkTG9jYWwgPSAoKSA9PiB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5wcm9qZWN0cykge1xuICAgICAgY29uc3QgcHJvamVjdEFycmF5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UucHJvamVjdHMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0QXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHByb2plY3RBcnJheVtpXSwgcHJvamVjdHMuUHJvamVjdC5wcm90b3R5cGUpO1xuICAgICAgICBjb25zdCB7IGxpc3QgfSA9IHByb2plY3RBcnJheVtpXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGxpc3Rbal0sIHRvZG8uVG9kby5wcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwcm9qZWN0cy5wcm9qZWN0TW9kdWxlLnNldFByb2plY3RzQXJyYXkocHJvamVjdEFycmF5KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHsgc2F2ZUxvY2FsLCBsb2FkTG9jYWwgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JhZ2VNb2R1bGU7IiwiIGltcG9ydCBwcm9qZWN0IGZyb20gJy4vcHJvamVjdCc7XG5pbXBvcnQgdG9kbyBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IHN0b3JhZ2VNb2R1bGUgZnJvbSAnLi9zdG9yYWdlJztcblxuY29uc3Qgc2hvdyA9IChvYmplY3QpID0+IHtcbiAgb2JqZWN0LmNsYXNzTGlzdC50b2dnbGUoJ2hpZGRlbicpO1xufTtcblxuLy8gY29uc3Qgc2hvd0J1dHRvbiA9IChvYmplY3QsIGNvbnRlbnQpID0+IHtcbi8vICAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4vLyAgIGJ0bi50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4vLyAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3cuYmluZCh0aGlzLCBvYmplY3QpKTtcbi8vICAgcmV0dXJuIGJ0bjtcbi8vIH07XG5cbmNvbnN0IGNyZWF0ZUxhYmVsID0gKG5hbWUpID0+IHtcbiAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGAke25hbWV9YCk7XG4gIGxldCBjYXBpdGFsaXplZCA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCk7XG4gIGNhcGl0YWxpemVkID0gY2FwaXRhbGl6ZWQuY29uY2F0KG5hbWUuc2xpY2UoMSkpO1xuICBsYWJlbC50ZXh0Q29udGVudCA9IGNhcGl0YWxpemVkO1xuXG4gIHJldHVybiBsYWJlbDtcbn07XG5cbmNvbnN0IGNyZWF0ZUlucHV0ID0gKG5hbWUsIHR5cGUpID0+IHtcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7bmFtZX1gKTtcbiAgaW5wdXQudHlwZSA9IHR5cGU7XG4gIHJldHVybiBpbnB1dDtcbn07XG5cbi8vIGNvbnN0IHNldFdoaXRlQmcgPSAoKSA9PiB7XG4vLyAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwcm9qZWN0cyBkaXYnKTtcbi8vICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXYubGVuZ3RoOyBpICs9IDEpIHtcbi8vICAgICBkaXZbaV0uY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbi8vICAgfVxuLy8gfTtcblxuY29uc3Qgc2V0QWN0aXZlID0gKCkgPT4ge1xuICBjb25zdCBwcm9qZWN0cyA9IHByb2plY3QuZ2V0UHJvamVjdHNBcnJheSgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgcHJvamVjdHNbaV0uYWN0aXZlID0gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGVkaXRCdXR0b24gPSAobGlzdCwgaSwgcGFyZW50KSA9PiB7XG4gIC8vIGlmIChwYXJlbnQucXVlcnlTZWxlY3RvcignLmV4cGFuZGVkJykpIHtcbiAgLy8gICBjb25zdCBleHBhbmRlZCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcuZXhwYW5kZWQnKTtcbiAgLy8gICBwYXJlbnQucmVtb3ZlQ2hpbGQoZXhwYW5kZWQpO1xuICAvLyB9IGVsc2Uge1xuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdleHBhbmRlZCcpO1xuICAgIGNvbnN0IGVkaXRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBlZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZWRpdC5iaW5kKHRoaXMsIGxpc3QsIGksIHBhcmVudCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZWRpdEJ0bi50ZXh0Q29udGVudCA9ICdFZGl0JztcblxuICAgIGRpdi5hcHBlbmRDaGlsZChlZGl0QnRuKTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgLy8gfVxufTtcblxuY29uc3QgYWRkVGFzayA9IChsaXN0LCBpbmRleCkgPT4ge1xuICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB3cmFwcGVyLmNsYXNzTGlzdC5hZGQoJ3RvZG8taXRlbXMnKTtcbiAgY29uc3QgdG9kb1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBjb25zdCB0b2RvRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGNvbnN0IHRvZG9EYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBjb25zdCB0b2RvUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGNvbnN0IGRlbGV0ZVRvZG9CdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgZGVsZXRlVG9kb0J0bi5jbGFzc0xpc3QuYWRkKCdkZWxldGUnKTtcbiAgZGVsZXRlVG9kb0J0bi50ZXh0Q29udGVudCA9ICdEZWxldGUnO1xuICBkZWxldGVUb2RvQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHRvZG8uZGVsZXRlVG9kbyhsaXN0LCBpbmRleCk7XG4gICAgbmV3RGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobmV3RGl2KTtcbiAgICBzdG9yYWdlTW9kdWxlLnNhdmVMb2NhbCgpO1xuICB9KTtcbiAgY29uc3QgZWRpdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBlZGl0QnRuLmNsYXNzTGlzdC5hZGQoJ2VkaXQnKTtcbiAgZWRpdEJ0bi50ZXh0Q29udGVudCA9ICdjbGljayBoZXJlIHRvIHZpZXcgbW9yZSc7XG4gIHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IGxpc3RbaW5kZXhdLnRpdGxlO1xuICBlZGl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxlZGl0QnV0dG9uLmJpbmQodGhpcywgbGlzdCwgaW5kZXgsIG5ld0RpdikpO1xuICB0b2RvRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBsaXN0W2luZGV4XS5kZXNjcmlwdGlvbjtcbiAgdG9kb0RhdGUudGV4dENvbnRlbnQgPSBsaXN0W2luZGV4XS5kYXRlO1xuICB0b2RvUHJpb3JpdHkudGV4dENvbnRlbnQgPSBsaXN0W2luZGV4XS5wcmlvcml0eTtcbiAgd3JhcHBlci5hcHBlbmRDaGlsZCh0b2RvVGl0bGUpO1xuICB3cmFwcGVyLmFwcGVuZENoaWxkKHRvZG9EZXNjcmlwdGlvbik7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQodG9kb0RhdGUpO1xuICB3cmFwcGVyLmFwcGVuZENoaWxkKHRvZG9Qcmlvcml0eSk7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZWRpdEJ0bik7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZGVsZXRlVG9kb0J0bik7XG4gIG5ld0Rpdi5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgcmV0dXJuIG5ld0Rpdjtcbn07XG5cbmNvbnN0IGxvYWRBbGxUb2RvcyA9IChpbmRleCwgZGl2KSA9PiB7XG4gIGNvbnN0IHRvZG9EaXYgPSBkaXY7XG4gIGNvbnN0IHByb2plY3RBcnIgPSBwcm9qZWN0LmdldFByb2plY3RzQXJyYXkoKTtcbiAgdG9kb0Rpdi5pbm5lckhUTUwgPSAnJztcblxuICBpZiAocHJvamVjdEFyci5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBidG4uY2xhc3NMaXN0LmFkZCgnYWRkJyk7XG4gIGJ0bi5zZXRBdHRyaWJ1dGUoJ2lkJywgaW5kZXgpO1xuICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xuICBwcm9qZWN0VGl0bGUudGV4dENvbnRlbnQgPSBwcm9qZWN0QXJyW2luZGV4XS5uYW1lO1xuICBidG4udGV4dENvbnRlbnQgPSAnQWRkIFRhc2snO1xuICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgdG9kbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtcyAudG9kby1mb3JtJyk7XG4gICAgdG9kby5zZXRBdHRyaWJ1dGUoJ2lkJywgaW5kZXgpO1xuICAgIGNvbnN0IHRpdGxlID0gdG9kby5xdWVyeVNlbGVjdG9yKCdoMycpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gJ05ldyBUb2RvJztcbiAgICBzaG93KHRvZG8pO1xuICB9KTtcbiAgdG9kb0Rpdi5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGUpO1xuICB0b2RvRGl2LmFwcGVuZENoaWxkKGJ0bik7XG4gIGNvbnN0IHsgbGlzdCB9ID0gcHJvamVjdEFycltpbmRleF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG5ld0RpdiA9IGFkZFRhc2sobGlzdCwgaSk7XG4gICAgdG9kb0Rpdi5hcHBlbmRDaGlsZChuZXdEaXYpO1xuICB9XG59O1xuXG5jb25zdCBhZGRQcm9qZWN0cyA9IChwcm9qZWN0cywgYWN0aXZlID0gMCwgcERpdiwgdERpdikgPT4ge1xuICBjb25zdCBwcm9qZWN0RGl2ID0gcERpdjtcbiAgY29uc3QgdG9kb0RpdiA9IHREaXY7XG4gIHByb2plY3REaXYuaW5uZXJIVE1MID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBuZXdEaXYuY2xhc3NMaXN0LmFkZCgnZC1mbGV4Jyk7XG4gICAgcHJvamVjdHNbaV0uYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGkgPT09IGFjdGl2ZSkge1xuICAgICAgcHJvamVjdHNbaV0uYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcHJvamVjdFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgcHJvamVjdFNwYW4uY2xhc3NMaXN0LmFkZCgncHJvamVjdCcpO1xuICAgIGNvbnN0IGRlbGV0ZVByb2plY3RCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBkZWxldGVQcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoJ2RlbGV0ZS1wcm9qZWN0Jyk7XG4gICAgZGVsZXRlUHJvamVjdEJ0bi50ZXh0Q29udGVudCA9ICdYJztcbiAgICBkZWxldGVQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYgKHByb2plY3RzW2ldLmFjdGl2ZSkge1xuICAgICAgICAvLyBpZiAocHJvamVjdHNbaV0pIHtcbiAgICAgICAgcHJvamVjdC5kZWxldGVQcm9qZWN0KGkpO1xuICAgICAgICBwcm9qZWN0RGl2LnJlbW92ZUNoaWxkKG5ld0Rpdik7XG4gICAgICAgIGxvYWRBbGxUb2RvcygwLCB0b2RvRGl2KTtcbiAgICAgICAgfVxuICAgICAgIGVsc2Uge1xuICAgICAgICBwcm9qZWN0LmRlbGV0ZVByb2plY3QoaSk7XG4gICAgICAgIGFkZFByb2plY3RzKHByb2plY3RzLCBwcm9qZWN0LmdldEFjdGl2ZSgpLCBwcm9qZWN0RGl2LCB0b2RvRGl2KTtcbiAgICAgIH1cbiAgICAgIHN0b3JhZ2VNb2R1bGUuc2F2ZUxvY2FsKCk7XG4gICAgfSk7XG4gICAgcHJvamVjdFNwYW4uY2xhc3NMaXN0LmFkZCgncG9pbnRlcicpO1xuICAgIHByb2plY3RTcGFuLnRleHRDb250ZW50ID0gcHJvamVjdHNbaV0ubmFtZTtcbiAgICBwcm9qZWN0U3Bhbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIC8vIGNvbnN0IHRvZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1mb3JtJyk7XG4gICAgICAvLyB0b2RvLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgbG9hZEFsbFRvZG9zKGksIHRvZG9EaXYpO1xuICAgICAgc2V0QWN0aXZlKCk7XG4gICAgICAvLyBzZXRXaGl0ZUJnKCk7XG4gICAgICAvLyBuZXdEaXYuY2xhc3NMaXN0LmFkZCgnZC1mbGV4Jyk7XG4gICAgICBwcm9qZWN0c1tpXS5hY3RpdmUgPSB0cnVlO1xuICAgIH0pO1xuICAgIG5ld0Rpdi5jbGFzc0xpc3QuYWRkKCdkLWZsZXgnKTtcbiAgICBuZXdEaXYuYXBwZW5kQ2hpbGQocHJvamVjdFNwYW4pO1xuICAgIG5ld0Rpdi5hcHBlbmRDaGlsZChkZWxldGVQcm9qZWN0QnRuKTtcbiAgICBwcm9qZWN0RGl2LmFwcGVuZENoaWxkKG5ld0Rpdik7XG4gIH1cbn07XG5cbmNvbnN0IHRvZG9Gb3JtID0gKHREaXYpID0+IHtcbiAgY29uc3QgdG9kb0RpdiA9IHREaXY7XG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gIGZvcm0uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJywgJ3RvZG8tZm9ybScpO1xuICBjb25zdCBmb3JtU3RydWN0dXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGZvcm1TdHJ1Y3R1cmUuY2xhc3NMaXN0LmFkZCgnZC1mbGV4JywgJ2ZsZXgtY29sdW1uJyk7XG4gIGNvbnN0IGZvcm1UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIGZvcm1UaXRsZS5jbGFzc0xpc3QuYWRkKCdtLWJvdC0xMCcsICdib2xkJywgJ3RpdGxlJyk7XG4gIGNvbnN0IHRpdGxlTGFiZWwgPSBjcmVhdGVMYWJlbCgndGl0bGUnKTtcbiAgY29uc3QgdGl0bGUgPSBjcmVhdGVJbnB1dCgndGl0bGUnLCAndGV4dCcpO1xuICB0aXRsZS52YWx1ZSA9ICcnO1xuICBjb25zdCBkZXNjcmlwdGlvbkxhYmVsID0gY3JlYXRlTGFiZWwoJ2Rlc2NyaXB0aW9uJyk7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgZGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKCdpZCcsICdkZXNjcmlwdGlvbicpO1xuICBkZXNjcmlwdGlvbi52YWx1ZSA9ICcnO1xuICBjb25zdCBkdWVMYWJlbCA9IGNyZWF0ZUxhYmVsKCdkdWUnKTtcbiAgY29uc3QgZHVlID0gY3JlYXRlSW5wdXQoJ2R1ZScsICdkYXRlJyk7XG4gIGR1ZS52YWx1ZSA9ICcnO1xuICBjb25zdCBwcmlvcml0eUxhYmVsID0gY3JlYXRlTGFiZWwoJ1ByaW9yaXR5Jyk7XG4gIGNvbnN0IGFycmF5ID0gWydIaWdoJywgJ0xvdycsICdNZWRpdW0nXTtcbiAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgcHJpb3JpdHkuc2V0QXR0cmlidXRlKCdpZCcsICdwcmlvcml0eScpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgb3B0aW9uLnZhbHVlID0gYXJyYXlbaV07XG4gICAgb3B0aW9uLnRleHQgPSBhcnJheVtpXTtcbiAgICBwcmlvcml0eS5hcHBlbmRDaGlsZChvcHRpb24pO1xuICB9XG4gIHByaW9yaXR5LnZhbHVlID0gJyc7XG5cbiAgY29uc3QgYnRuID0gY3JlYXRlSW5wdXQoJ1N1Ym1pdCcsICdzdWJtaXQnKTtcbiAgYnRuLnZhbHVlID0gJ1N1Ym1pdCc7XG5cbiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdGl0bGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyN0aXRsZScpO1xuICAgIGNvbnN0IGRlc2MgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNkZXNjcmlwdGlvbicpO1xuICAgIGNvbnN0IGR1ZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2R1ZScpO1xuICAgIGNvbnN0IHByaW9yaXR5ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcjcHJpb3JpdHknKTtcbiAgICBjb25zdCBuZXd0b2RvID0gdG9kby5jcmVhdGVUb2RvKHRpdGxlLnZhbHVlLCBkZXNjLnZhbHVlLCBkdWUudmFsdWUsIHByaW9yaXR5LnZhbHVlKTtcbiAgICBjb25zdCBhcnIgPSBwcm9qZWN0LmdldFByb2plY3RzQXJyYXkoKTtcbiAgICBjb25zdCBpbmRleCA9IGZvcm0uaWQ7XG4gICAgYXJyW2luZGV4XS5hZGRUb2RvKG5ld3RvZG8pO1xuICAgIGxvYWRBbGxUb2RvcyhpbmRleCwgdG9kb0Rpdik7XG4gICAgZm9ybS5yZXNldCgpO1xuICAgIHN0b3JhZ2VNb2R1bGUuc2F2ZUxvY2FsKCk7XG4gIH0pO1xuICBmb3JtU3RydWN0dXJlLmFwcGVuZENoaWxkKGZvcm1UaXRsZSk7XG4gIGZvcm1TdHJ1Y3R1cmUuYXBwZW5kQ2hpbGQodGl0bGVMYWJlbCk7XG4gIGZvcm1TdHJ1Y3R1cmUuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICBmb3JtU3RydWN0dXJlLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uTGFiZWwpO1xuICBmb3JtU3RydWN0dXJlLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKTtcbiAgZm9ybVN0cnVjdHVyZS5hcHBlbmRDaGlsZChkdWVMYWJlbCk7XG4gIGZvcm1TdHJ1Y3R1cmUuYXBwZW5kQ2hpbGQoZHVlKTtcbiAgZm9ybVN0cnVjdHVyZS5hcHBlbmRDaGlsZChwcmlvcml0eUxhYmVsKTtcbiAgZm9ybVN0cnVjdHVyZS5hcHBlbmRDaGlsZChwcmlvcml0eSk7XG4gIGZvcm1TdHJ1Y3R1cmUuYXBwZW5kQ2hpbGQoYnRuKTtcbiAgZm9ybS5hcHBlbmRDaGlsZChmb3JtU3RydWN0dXJlKTtcblxuICByZXR1cm4gZm9ybTtcbn07XG5cbmNvbnN0IHRvZG9GaWVsZHMgPSAodCA9ICcnLCBkZXNjID0gJycsIGR1ZURhdGUgPSAnJywgcHIgPSAnJykgPT4ge1xuICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZC1mbGV4JywgJ2ZsZXgtY29sdW1uJyk7XG4gIGNvbnN0IGZvcm1UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIGZvcm1UaXRsZS5jbGFzc0xpc3QuYWRkKCdtLWJvdC0xMCcsICdib2xkJywgJ3RpdGxlJyk7XG4gIGNvbnN0IHRpdGxlTGFiZWwgPSBjcmVhdGVMYWJlbCgndGl0bGUnKTtcbiAgY29uc3QgdGl0bGUgPSBjcmVhdGVJbnB1dCgndGl0bGUnLCAndGV4dCcpO1xuICB0aXRsZS52YWx1ZSA9IHQ7XG4gIGNvbnN0IGRlc2NyaXB0aW9uTGFiZWwgPSBjcmVhdGVMYWJlbCgnZGVzY3JpcHRpb24nKTtcbiAgY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICBkZXNjcmlwdGlvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2Rlc2NyaXB0aW9uJyk7XG4gIGRlc2NyaXB0aW9uLnZhbHVlID0gZGVzYztcbiAgY29uc3QgZHVlTGFiZWwgPSBjcmVhdGVMYWJlbCgnZHVlJyk7XG4gIGNvbnN0IGR1ZSA9IGNyZWF0ZUlucHV0KCdkdWUnLCAnZGF0ZScpO1xuICBkdWUudmFsdWUgPSBkdWVEYXRlO1xuICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICBwcmlvcml0eS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3ByaW9yaXR5Jyk7XG4gIGNvbnN0IGFycmF5ID0gWydIaWdoJywgJ0xvdycsICdNZWRpdW0nXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIG9wdGlvbi52YWx1ZSA9IGFycmF5W2ldO1xuICAgIG9wdGlvbi50ZXh0ID0gYXJyYXlbaV07XG4gICAgcHJpb3JpdHkuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgfVxuICBwcmlvcml0eS52YWx1ZSA9IHByO1xuICBjb25zdCBwcmlvcml0eUxhYmVsID0gY3JlYXRlTGFiZWwoJ3ByaW9yaXR5Jyk7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZm9ybVRpdGxlKTtcbiAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aXRsZUxhYmVsKTtcbiAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb25MYWJlbCk7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb24pO1xuICB3cmFwcGVyLmFwcGVuZENoaWxkKGR1ZUxhYmVsKTtcbiAgd3JhcHBlci5hcHBlbmRDaGlsZChkdWUpO1xuICB3cmFwcGVyLmFwcGVuZENoaWxkKHByaW9yaXR5TGFiZWwpO1xuICB3cmFwcGVyLmFwcGVuZENoaWxkKHByaW9yaXR5KTtcblxuICByZXR1cm4gd3JhcHBlcjtcbn07XG5cbmNvbnN0IGVkaXRGb3JtID0gKGxpc3QsIGksIGVsZW1lbnQpID0+IHtcbiAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgZm9ybS5jbGFzc0xpc3QuYWRkKCd0b2RvLWZvcm0nKTtcbiAgY29uc3QgZm9ybVN0cnVjdHVyZSA9IHRvZG9GaWVsZHMoXG4gICAgbGlzdFtpXS50aXRsZSxcbiAgICBsaXN0W2ldLmRlc2NyaXB0aW9uLFxuICAgIGxpc3RbaV0uZGF0ZSxcbiAgICBsaXN0W2ldLnByaW9yaXR5LFxuICApO1xuICBjb25zdCBidG4gPSBjcmVhdGVJbnB1dCgnU3VibWl0JywgJ3N1Ym1pdCcpO1xuICBidG4udmFsdWUgPSAnRWRpdCc7XG5cbiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdGl0bGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyN0aXRsZScpO1xuICAgIGNvbnN0IGRlc2MgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNkZXNjcmlwdGlvbicpO1xuICAgIGNvbnN0IGR1ZSA9IGZvcm0ucXVlcnlTZWxlY3RvcignI2R1ZScpO1xuICAgIGNvbnN0IHByaW9yaXR5ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcjcHJpb3JpdHknKTtcbiAgICBsaXN0W2ldLmVkaXQodGl0bGUudmFsdWUsIGRlc2MudmFsdWUsIGR1ZS52YWx1ZSwgcHJpb3JpdHkudmFsdWUpO1xuICAgIGNvbnN0IGVkaXRlZCA9IGFkZFRhc2sobGlzdCwgaSk7XG4gICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlZGl0ZWQsIGVsZW1lbnQpO1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgLy8gIGVkaXRCdXR0b24obGlzdCwgaSwgZWRpdGVkKTtcbiAgICBzdG9yYWdlTW9kdWxlLnNhdmVMb2NhbCgpO1xuICB9KTtcblxuICBmb3JtU3RydWN0dXJlLmFwcGVuZENoaWxkKGJ0bik7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoZm9ybVN0cnVjdHVyZSk7XG5cbiAgcmV0dXJuIGZvcm07XG59O1xuXG5jb25zdCBlZGl0ID0gKGxpc3QsIGksIHBhcmVudCkgPT4ge1xuICBjb25zdCBleHBhbmRlZCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcuZXhwYW5kZWQnKTtcbiAgZXhwYW5kZWQuaW5uZXJIVE1MID0gJyc7XG4gIGNvbnN0IGZvcm0gPSBlZGl0Rm9ybShsaXN0LCBpLCBwYXJlbnQpO1xuICBleHBhbmRlZC5hcHBlbmRDaGlsZChmb3JtKTtcbn07XG5cblxuY29uc3QgcHJvamVjdEZvcm0gPSAocERpdiwgdERpdiwgdG9kb0YpID0+IHtcbiAgY29uc3QgcHJvamVjdERpdiA9IHBEaXY7XG4gIGNvbnN0IHRvZG9EaXYgPSB0RGl2O1xuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnZC1mbGV4JywgJ2ZsZXgtY29sdW1uJyk7XG4gIGNvbnN0IGZvcm1UaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIGZvcm1UaXRsZS50ZXh0Q29udGVudCA9ICdOZXcgUHJvamVjdCc7XG4gIGZvcm1UaXRsZS5jbGFzc0xpc3QuYWRkKCdtLWJvdC0xMCcsICdib2xkJywgJ3RpdGxlJyk7XG4gIGNvbnN0IG5hbWVMYWJlbCA9IGNyZWF0ZUxhYmVsKCduYW1lJyk7XG4gIGNvbnN0IG5hbWUgPSBjcmVhdGVJbnB1dCgnbmFtZScsICd0ZXh0Jyk7XG5cbiAgY29uc3Qgc3VibWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIHN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHByb2plY3QuY3JlYXRlUHJvamVjdChuYW1lLnZhbHVlKTtcbiAgICBjb25zdCBhcnIgPSBwcm9qZWN0LmdldFByb2plY3RzQXJyYXkoKTtcbiAgICBhZGRQcm9qZWN0cyhhcnIsIGFyci5sZW5ndGggLSAxLCBwcm9qZWN0RGl2LCB0b2RvRGl2KTtcbiAgICBsb2FkQWxsVG9kb3MoYXJyLmxlbmd0aCAtIDEsIHRvZG9EaXYpO1xuICAgIGZvcm0ucmVzZXQoKTtcbiAgICBjb25zdCB0b2RvRm9ybSA9IHRvZG9GO1xuICAgIHRvZG9Gb3JtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIHN0b3JhZ2VNb2R1bGUuc2F2ZUxvY2FsKCk7XG4gIH0pO1xuICBzdWJtaXQudGV4dENvbnRlbnQgPSAnU3VibWl0JztcblxuICB3cmFwcGVyLmFwcGVuZENoaWxkKGZvcm1UaXRsZSk7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQobmFtZUxhYmVsKTtcbiAgd3JhcHBlci5hcHBlbmRDaGlsZChuYW1lKTtcbiAgd3JhcHBlci5hcHBlbmRDaGlsZChzdWJtaXQpO1xuICBmb3JtLmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuXG4gIHJldHVybiBmb3JtO1xufTtcblxuY29uc3QgYWxsUGFnZSA9IChwcm9qZWN0cykgPT4ge1xuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcbiAgY29udGVudC5jbGFzc0xpc3QuYWRkKCdkLWZsZXgnLCAnY29udGVudCcpO1xuICBjb25zdCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IHRvZG9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgZm9ybURpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBmb3JtRGl2LmNsYXNzTGlzdC5hZGQoJ2Zvcm1zJywgJ2Fic29sdXRlJyk7XG4gIHByb2plY3REaXYuc2V0QXR0cmlidXRlKCdpZCcsICdwcm9qZWN0cycsICdkLWZsZXgnKTtcbiAgcHJvamVjdERpdi5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0cycpO1xuICB0b2RvRGl2LnNldEF0dHJpYnV0ZSgnaWQnLCAndG9kbycpO1xuICB0b2RvRGl2LmNsYXNzTGlzdC5hZGQoJ3RvZG8nKTtcbiAgY29uc3QgdG9kbyA9IHRvZG9Gb3JtKHRvZG9EaXYpO1xuICBjb25zdCBmb3JtID0gcHJvamVjdEZvcm0ocHJvamVjdERpdiwgdG9kb0RpdiwgdG9kbyk7XG4gIGZvcm1EaXYuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gIGZvcm1EaXYuYXBwZW5kQ2hpbGQodG9kbyk7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZm9ybURpdik7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvamVjdERpdik7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQodG9kb0Rpdik7XG4gIGxvYWRBbGxUb2RvcygwLCB0b2RvRGl2KTtcbiAgYWRkUHJvamVjdHMocHJvamVjdHMsIDAsIHByb2plY3REaXYsIHRvZG9EaXYpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYWxsUGFnZTtcbmV4cG9ydCB7XG4gIHNob3csXG4gIC8vIHNob3dCdXR0b24sXG4gIGNyZWF0ZUxhYmVsLFxuICBjcmVhdGVJbnB1dCxcbiAgc2V0QWN0aXZlLFxuICBhZGRUYXNrLFxuICBsb2FkQWxsVG9kb3MsXG4gIGFkZFByb2plY3RzLFxuICB0b2RvRm9ybSxcbiAgZWRpdCxcbiAgZWRpdEZvcm0sXG4gIHByb2plY3RGb3JtLFxuICBhbGxQYWdlLFxuICB0b2RvRmllbGRzLFxuIGVkaXRCdXR0b24sXG59OyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHByb2plY3QgZnJvbSAnLi9wcm9qZWN0JztcbmltcG9ydCB0b2RvIGZyb20gJy4vdGFzayc7XG5pbXBvcnQgcGFnZSBmcm9tICcuL2FsbCc7XG5pbXBvcnQgc3RvcmFnZU1vZHVsZSBmcm9tICcuL3N0b3JhZ2UnO1xuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5cbmlmICghbG9jYWxTdG9yYWdlLnByb2plY3RzKSB7XG4gIHByb2plY3QuY3JlYXRlUHJvamVjdCgnRGVmYXVsdCcsIFt0b2RvLmNyZWF0ZVRvZG8oJ05ldyBUb2RvJywgJ1lvdSBjYW4gY3JlYXRlIFRvZG9zJywgJzEyLTEwLTIwMjEnLCAxKV0pO1xufSBlbHNlIHtcbiAgc3RvcmFnZU1vZHVsZS5sb2FkTG9jYWwoKTtcbn1cblxucGFnZShwcm9qZWN0LmdldFByb2plY3RzQXJyYXkoKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==